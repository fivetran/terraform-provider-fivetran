---
page_title: "Resource: fivetran_destination"
---

# Resource: fivetran_destination

This resource allows you to create, update, and delete destinations.

## Example Usage

```hcl
resource "fivetran_destination" "dest" {
    group_id = fivetran_group.group.id
    service = "postgres_rds_warehouse"
    time_zone_offset = "0"
    region = "GCP_US_EAST4"
    trust_certificates = "true"
    trust_fingerprints = "true"
    run_setup_tests = "true"

    config {
        host = "destination.fqdn"
        port = 5432
        user = "postgres"
        password = "myPass"
        database = "fivetran"
        connection_type = "Directly"
    }
}
```

{{ .SchemaMarkdown | trimspace }}

## Setup tests

Field `run_setup_tests` doesn't have upstream value, it only defines local resource behavoir. This means that when you update only `run_setup_tests` value (from `false` to `true` for example) it won't cause any upstream actions. The value will be just saved in terraform state and then used on effective field updates.

The default value is `false` - this means that no setup tests will be performed during create/update. To perform setup tests you should set value to `true`.

## Import

1. To import an existing `fivetran_destination` resource into your Terraform state, you need to get **Destination Group ID** on the destination page in your Fivetran dashboard.
To retrieve existing groups, use the [fivetran_groups data source](/docs/data-sources/groups).
2. Define an empty resource in your `.tf` configuration:

```hcl
resource "fivetran_destination" "my_imported_destination" {

}
```

3. Run the `terraform import` command with the following parameters:

```
terraform import fivetran_destination.my_imported_destination {your Destination Group ID}
```

4. Use the `terraform state show` command to get the values from the state:

```
terraform state show 'fivetran_destination.my_imported_destination'
```
5. Copy the values and paste them to your `.tf` configuration.

-> The `config` object in the state contains all properties defined in the schema. You need to remove properties from the `config` that are not related to destinations. See the [Fivetran REST API documentation](https://fivetran.com/docs/rest-api/destinations/config) for reference to find the properties you need to keep in the `config` section.