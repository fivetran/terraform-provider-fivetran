---
page_title: "Resource: fivetran_connector"
---

# Resource: fivetran_connector

This resource allows you to create, update, and delete connectors.

## Example Usage

```hcl
resource "fivetran_connector" "amplitude" {
    group_id = fivetran_group.group.id
    service = "amplitude"
   
    destination_schema {
        name = "amplitude_connector"
    } 

    config {
        project_credentials {
            project = "project1"
            api_key = "my_api_key"
            secret_key = "my_secret_key"
        }

        project_credentials {
            project = "project2"
            api_key = "my_api_key"
            secret_key = "my_secret_key"
        }
    }
}
```

### NOTE: resources indirect dependencies

The connector resource receives the `group_id` parameter value from the group resource, but the destination resource depends on the group resource.  When you try to destroy the destination resource infrastructure, the terraform plan is created successfully, but once you run the `terraform apply` command, it returns an error because the Fivetran API doesn't let you delete destinations that have linked connectors. To solve this problem, you should either explicitly define `depends_on` between the connector and destination:

```hcl
resource "fivetran_connector" "amplitude" {
    ...
    depends_on = [
        fivetran_destination.my_destination
    ]
}
```

or get the group ID from the destination:

```hcl
resource "fivetran_connector" "amplitude" {
    group_id = fivetran_destination.my_destination.group_id
    ...
}
```

{{ .SchemaMarkdown | trimspace }}

## Import

1. To import an existing `fivetran_connector` resource into your Terraform state, you need to get **Fivetran Connector ID** on the **Setup** tab of the connector page in your Fivetran dashboard.

2. Retrieve all connectors in a particular group using the [fivetran_group_connectors data source](/docs/data-sources/group_connectors). To retrieve existing groups, use the [fivetran_groups data source](/docs/data-sources/groups).

3. Define an empty resource in your `.tf` configuration:

```hcl
resource "fivetran_connector" "my_imported_connector" {

}
```

4. Run the `terraform import` command:

```
terraform import fivetran_connector.my_imported_connector {your Fivetran Connector ID}
```

5.  Use the `terraform state show` command to get the values from the state:

```
terraform state show 'fivetran_connector.my_imported_connector'
```
6. Copy the values and paste them to your `.tf` configuration.

-> The `config` object in the state contains all properties defined in the schema. You need to remove properties from the `config` that are not related to connectors. See the [Fivetran REST API documentation](https://fivetran.com/docs/rest-api/connectors/config) for reference to find the properties you need to keep in the `config` section.

### How to authorize connector

## GitHub connector example

To authorize a GitHub connector via terraform using personal access token you should specify `auth_mode`, `username` and `pat` inside `config` block instead of `auth` and set `run_setup_tests` to `true`:

```hcl
resource "fivetran_connector" "my_github_connector" {
    group_id = "group_id"
    service = "github"
    run_setup_tests = "true"

    destination_schema {
        name = "github_connector"
    } 

    config {
        sync_mode = "AllRepositories"
        use_webhooks = "false"
        auth_mode = "PersonalAccessToken"
        username = "git-hub-user-name"
        pat = "ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
    }
}
```