---
page_title: "Resource: fivetran_transformation_project"
---

# Resource: fivetran_transformation_project

Resource is in ALPHA state.

This resource allows you to add, manage and delete transformation projects in your account. 

## Example Usage

```hcl
resource "fivetran_transformation_project" "project" {
    provider = fivetran-provider
    group_id = "group_id"
    type = "DBT_GIT"
    run_tests = true

    project_config {
        git_remote_url = "git_remote_url"
        git_branch = "git_branch"
        folder_path = "folder_path"
        dbt_version = "dbt_version"
        default_schema = "default_schema"
        threads = 0
        target_name = "target_name"
        environment_vars = ["environment_var"]
    }
}
```

{{ .SchemaMarkdown | trimspace }}

## Import

1. To import an existing `fivetran_transformation_project` resource into your Terraform state, you need to get **Transformation Project ID** via API call `GET https://api.fivetran.com/v1/transformation-projects` to retrieve available projects.
2. Fetch project details for particular `project-id` using `GET https://api.fivetran.com/v1/transformation-projects/{project-id}` to ensure that this is the project you want to import.
3. Define an empty resource in your `.tf` configuration:

```hcl
resource "fivetran_transformation_project" "my_imported_fivetran_transformation_project" {

}
```

4. Run the `terraform import` command:

```
terraform import fivetran_transformation_project.my_imported_fivetran_transformation_project {Transformation Project ID}
```

4. Use the `terraform state show` command to get the values from the state:

```
terraform state show 'fivetran_transformation_project.my_imported_fivetran_transformation_project'
```

5. Copy the values and paste them to your `.tf` configuration.


## How to set up a Transformation Project with private Git Repo.

To be able to use private Transformation Project Git repository you have to grant Fivetran access to this repo.
To do that you need to add a Deploy Key to your repository. 
To get SSH key from Fivetran create `fivetran_transformation_project` resource:

```hcl
resource "fivetran_group" "my_group" {
    name = "My_Group"
}

resource "fivetran_transformation_project" "project" {
    provider = fivetran-provider
    group_id = "group_id"
    type = "DBT_GIT"
    run_tests = true

    project_config {
        git_remote_url = "git_remote_url"
        git_branch = "git_branch"
        folder_path = "folder_path"
        dbt_version = "dbt_version"
        default_schema = "default_schema"
        threads = 0
        target_name = "target_name"
        environment_vars = ["environment_var"]
    }
}
```

Then you need to set up the Transformation Project public key (field `public_key` in created resource) as a deploy key into your repo using:

[GitHub Provider Repository Deploy Key Resource](https://registry.terraform.io/providers/integrations/github/latest/docs/resources/repository_deploy_key):
```hcl
resource "github_repository_deploy_key" "example_repository_deploy_key" {
  title      = "Repository test key"
  repository = "repo-owner/repo-name"
  key        = fivetran_transformation_project.test_project.project_config.public_key
  read_only  = true
}
```

or

[Bitbucket Provider Repository Deploy Key Resource]https://registry.terraform.io/providers/DrFaust92/bitbucket/latest/docs/resources/deploy_key)
```hcl
resource "bitbucket_deploy_key" "test" {
  workspace  = "repo-owner"
  repository = "repo-name"  
  key        = fivetran_transformation_project.test_project.project_config.public_key
  label      = "Repository test key"
}
```

Since we recommend using third-party providers in this case, please make sure that access to the repositories is provided correctly and the providers are configured correctly for connection.